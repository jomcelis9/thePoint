
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.3.1
 * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
 */
Prisma.prismaVersion = {
  client: "6.3.1",
  engine: "acc0b9dd43eb689cbd20c9470515d719db10d0b0"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Appointment_statusScalarFieldEnum = {
  appointment_status_id: 'appointment_status_id',
  appointment_status: 'appointment_status'
};

exports.Prisma.AppointmentsScalarFieldEnum = {
  appoint_id: 'appoint_id',
  preferred_time: 'preferred_time',
  preferred_date: 'preferred_date',
  staff_id: 'staff_id',
  appointment_status_id: 'appointment_status_id',
  final_date: 'final_date',
  final_time: 'final_time',
  user_id: 'user_id',
  date_booked: 'date_booked'
};

exports.Prisma.Clinic_staffScalarFieldEnum = {
  staff_id: 'staff_id',
  staff_name: 'staff_name',
  staff_birthdate: 'staff_birthdate'
};

exports.Prisma.Clinic_staff_detailsScalarFieldEnum = {
  clinic_staff_contact_id: 'clinic_staff_contact_id',
  staff_id: 'staff_id',
  staff_contact: 'staff_contact',
  staff_address: 'staff_address'
};

exports.Prisma.GuardianScalarFieldEnum = {
  guardian_id: 'guardian_id',
  patient_details_id: 'patient_details_id',
  guardian_name: 'guardian_name',
  guardian_contact: 'guardian_contact'
};

exports.Prisma.Mode_of_paymentScalarFieldEnum = {
  mode_of_payment_id: 'mode_of_payment_id',
  mode_of_payment: 'mode_of_payment'
};

exports.Prisma.Patient_appointmentsScalarFieldEnum = {
  patient_appointments_id: 'patient_appointments_id',
  patient_id: 'patient_id',
  appoint_id: 'appoint_id',
  booking_date: 'booking_date'
};

exports.Prisma.Patient_conditionsScalarFieldEnum = {
  patient_conditions_id: 'patient_conditions_id',
  condition_type: 'condition_type',
  condition_description: 'condition_description'
};

exports.Prisma.Patient_detailsScalarFieldEnum = {
  patient_details_id: 'patient_details_id',
  patient_id: 'patient_id',
  patient_conditions_id: 'patient_conditions_id',
  patient_birth_date: 'patient_birth_date'
};

exports.Prisma.PatientsScalarFieldEnum = {
  patient_id: 'patient_id',
  patient_name: 'patient_name',
  user_id: 'user_id'
};

exports.Prisma.PaymentScalarFieldEnum = {
  payment_id: 'payment_id',
  appoint_id: 'appoint_id',
  user_id: 'user_id',
  payment_status: 'payment_status'
};

exports.Prisma.RecurrenceScalarFieldEnum = {
  recurrence_id: 'recurrence_id',
  recurrence_type: 'recurrence_type',
  interval: 'interval',
  start_date: 'start_date',
  end_date: 'end_date',
  occurence_count: 'occurence_count',
  time: 'time'
};

exports.Prisma.Recurring_instancesScalarFieldEnum = {
  instance_id: 'instance_id',
  appoint_id: 'appoint_id',
  recurrence_id: 'recurrence_id',
  appoint_date: 'appoint_date',
  appoint_time: 'appoint_time',
  instance_status: 'instance_status'
};

exports.Prisma.SessionScalarFieldEnum = {
  session_id: 'session_id',
  patient_id: 'patient_id',
  staff_id: 'staff_id',
  appoint_id: 'appoint_id'
};

exports.Prisma.Session_detailsScalarFieldEnum = {
  session_details_id: 'session_details_id',
  session_id: 'session_id',
  session_description: 'session_description',
  session_date: 'session_date',
  session_time: 'session_time',
  session_document: 'session_document'
};

exports.Prisma.Staff_roleScalarFieldEnum = {
  staff_role_id: 'staff_role_id',
  staff_id: 'staff_id',
  staff_role: 'staff_role'
};

exports.Prisma.Type_of_paymentScalarFieldEnum = {
  type_of_payment_id: 'type_of_payment_id',
  type_of_payment: 'type_of_payment'
};

exports.Prisma.User_contactsScalarFieldEnum = {
  user_contact_id: 'user_contact_id',
  user_id: 'user_id',
  user_email: 'user_email',
  user_contact_number: 'user_contact_number'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  user_full_name: 'user_full_name',
  user_password: 'user_password',
  username: 'username'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  appointment_status: 'appointment_status',
  appointments: 'appointments',
  clinic_staff: 'clinic_staff',
  clinic_staff_details: 'clinic_staff_details',
  guardian: 'guardian',
  mode_of_payment: 'mode_of_payment',
  patient_appointments: 'patient_appointments',
  patient_conditions: 'patient_conditions',
  patient_details: 'patient_details',
  patients: 'patients',
  payment: 'payment',
  recurrence: 'recurrence',
  recurring_instances: 'recurring_instances',
  session: 'session',
  session_details: 'session_details',
  staff_role: 'staff_role',
  type_of_payment: 'type_of_payment',
  user_contacts: 'user_contacts',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
