generator client {
  provider = "prisma-client-js"
  seed = "node prisma/seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URLx")
}

model appointment_status {
  appointment_status_id BigInt         @id @default(autoincrement())
  appointment_status    String?        @db.VarChar(11)
  appointments          appointments[]
}

model appointments {
  appoint_id             BigInt                 @id @default(autoincrement())
  preferred_time         DateTime?              @db.Time(6)
  preferred_date         DateTime?              @db.Date
  staff_id               BigInt?
  appointment_status_id  BigInt?
  final_date             DateTime?              @db.Date
  final_time             DateTime?              @db.Time(6)
  user_id                BigInt?                // Changed from Int? to BigInt?
  appointment_status     appointment_status?    @relation(fields: [appointment_status_id], references: [appointment_status_id], onDelete: NoAction, onUpdate: NoAction)
  clinic_staff           clinic_staff?          @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  users                  users?                 @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  patient_appointments   patient_appointments[]
  recurring_instances    recurring_instances[]
  session                session[]
}

model clinic_staff {
  staff_id             BigInt                 @id @default(autoincrement())
  staff_name           String?                @db.VarChar(50)
  staff_birthdate      DateTime?              @db.Date
  appointments         appointments[]
  clinic_staff_details clinic_staff_details[]
  session              session[]
  staff_role           staff_role[]
}

model clinic_staff_details {
  clinic_staff_contact_id BigInt       @id @default(autoincrement())
  staff_id                BigInt
  staff_contact           String?      @db.VarChar(50)
  staff_address           String?      @db.VarChar(100)
  clinic_staff            clinic_staff @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

model guardian {
  guardian_id        BigInt  @id @default(autoincrement())
  patient_details_id BigInt
  guardian_name      String? @db.VarChar(50)
  guardian_contact   String? @db.VarChar(11)
}

model mode_of_payment {
  mode_of_payment_id BigInt  @id @default(autoincrement())
  mode_of_payment    String? @db.VarChar(30)
}

model patient_appointments {
  patient_appointments_id BigInt       @id @default(autoincrement())
  patient_id              BigInt
  appoint_id              BigInt
  booking_date            DateTime?    @db.Date
  appointments            appointments @relation(fields: [appoint_id], references: [appoint_id], onDelete: NoAction, onUpdate: NoAction)
  patients                patients     @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)
}

model patient_conditions {
  patient_conditions_id    BigInt              @id @default(autoincrement())
  condition_type           String?             @db.VarChar(50)
  condition_description    String?             @db.VarChar(100)
  patient_conditions       patient_conditions  @relation("patient_conditionsTopatient_conditions", fields: [patient_conditions_id], references: [patient_conditions_id], onDelete: Cascade)
  other_patient_conditions patient_conditions? @relation("patient_conditionsTopatient_conditions")
}

model patient_details {
  patient_details_id    BigInt    @id @default(autoincrement())
  patient_id            BigInt
  patient_conditions_id BigInt
  patient_birth_date    DateTime? @db.Date
  patients              patients  @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade)
}

model patients {
  patient_id           BigInt                 @id @default(autoincrement())
  patient_name         String?                @db.VarChar(100)
  user_id              BigInt
  patient_appointments patient_appointments[]
  patient_details      patient_details[]
  users                users                  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  session              session[]
}

model payment {
  payment_id     BigInt  @id @default(autoincrement())
  appoint_id     BigInt
  user_id        BigInt
  payment_status String? @db.VarChar(30)
}

model recurrence {
  recurrence_id       BigInt                @id @default(autoincrement())
  recurrence_type     String?               @db.VarChar(30)
  interval            String?               @db.VarChar(50)
  start_date          DateTime?             @db.Date
  end_date            DateTime?             @db.Date
  occurence_count     BigInt?
  time                DateTime?             @db.Time(6)
  recurring_instances recurring_instances[]
}

model recurring_instances {
  instance_id     BigInt       @id @default(autoincrement())
  appoint_id      BigInt
  recurrence_id   BigInt
  appoint_date    DateTime?    @db.Date
  appoint_time    DateTime?    @db.Time(6)
  instance_status String?      @db.VarChar(30)
  appointments    appointments @relation(fields: [appoint_id], references: [appoint_id], onDelete: Cascade, onUpdate: NoAction)
  recurrence      recurrence   @relation(fields: [recurrence_id], references: [recurrence_id], onDelete: Cascade, onUpdate: NoAction)
}

model session {
  session_id      BigInt            @id @default(autoincrement())
  patient_id      BigInt
  staff_id        BigInt
  appoint_id      BigInt
  appointments    appointments      @relation(fields: [appoint_id], references: [appoint_id], onDelete: NoAction, onUpdate: NoAction)
  patients        patients          @relation(fields: [patient_id], references: [patient_id], onDelete: Cascade, onUpdate: NoAction)
  clinic_staff    clinic_staff      @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  session_details session_details[]
}

model session_details {
  session_details_id  BigInt    @id @default(autoincrement())
  session_id          BigInt
  session_description String?   @db.VarChar(100)
  session_date        DateTime? @db.Date
  session_time        DateTime? @db.Time(6)
  session_document    Bytes?
  session             session   @relation(fields: [session_id], references: [session_id], onDelete: NoAction, onUpdate: NoAction)
}

model staff_role {
  staff_role_id BigInt       @id @default(autoincrement())
  staff_id      BigInt
  staff_role    String?      @db.VarChar(50)
  clinic_staff  clinic_staff @relation(fields: [staff_id], references: [staff_id], onDelete: Cascade, onUpdate: NoAction)
}

model type_of_payment {
  type_of_payment_id BigInt  @id @default(autoincrement())
  type_of_payment    String? @db.VarChar(30)
}

model user_contacts {s
  user_contact_id     BigInt  @id @default(autoincrement())
  user_id             BigInt
  user_email          String? @db.VarChar(50)
  user_contact_number String? @db.VarChar(11)
  users               users   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id        BigInt          @id @default(autoincrement())
  user_full_name String?         @db.VarChar(50)
  user_password  String?         @db.VarChar(50)
  username       String?         @db.VarChar(50)
  appointments   appointments[]
  patients       patients[]
  user_contacts  user_contacts[]
}

